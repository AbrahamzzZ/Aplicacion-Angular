--Creacion de la base de datos
CREATE DATABASE Sistema_Supermercado; 
go

USE Sistema_Supermercado;
go

--Modulo Negocio Tabla-Procedimiento almacenado-Inserción
CREATE TABLE NEGOCIO (ID_NEGOCIO int primary key identity,
NOMBRE varchar (60),
TELEFONO varchar (10) unique,
RUC varchar(13) unique,
DIRECCION varchar(60),
CORREO_ELECTRONICO varchar(40),
LOGO varbinary(max)NUll
);
GO
INSERT INTO NEGOCIO (NOMBRE, TELEFONO, RUC, DIRECCION, CORREO_ELECTRONICO) 
VALUES('Supermercado Paradisia','0969810812','0102030405785','Mucho Lote 3 etapa','SupermercadoParadisia@gmail.com');
GO

CREATE PROCEDURE PA_OBTENER_NEGOCIO(
	@Id_Negocio int
)
AS
BEGIN
	SELECT ID_NEGOCIO, NOMBRE, TELEFONO, RUC, DIRECCION, CORREO_ELECTRONICO, LOGO FROM NEGOCIO
	WHERE ID_NEGOCIO = @Id_Negocio;
END;
GO

CREATE PROCEDURE PA_EDITAR_NEGOCIO(
@Id_Negocio int,
@Nombre varchar(60),
@Telefono varchar(10),
@Ruc varchar(13),
@Direccion varchar(60),
@Correo_Electronico varchar(40),
@Logo varbinary(max) = NULL
)
AS
BEGIN
	UPDATE NEGOCIO set NOMBRE = @Nombre, TELEFONO = @Telefono, RUC = @Ruc, DIRECCION = @Direccion, CORREO_ELECTRONICO = @Correo_Electronico, LOGO = @Logo WHERE ID_NEGOCIO = @Id_Negocio;
END;
GO

--Modulo Sucursal Tabla-Procedimiento almacenado-Inserción
CREATE TABLE SUCURSAL (ID_SUCURSAL INT PRIMARY KEY IDENTITY,
CODIGO VARCHAR(10) UNIQUE,
ID_NEGOCIO INT FOREIGN KEY REFERENCES NEGOCIO(ID_NEGOCIO),
NOMBRE_SUCURSAL VARCHAR(30),
DIRECCION_SUCURSAL VARCHAR(250),
UBICACION_SUCURSAL GEOGRAPHY,
CIUDAD_SUCURSAL VARCHAR(30),
ESTADO BIT
);
GO
CREATE PROCEDURE PA_LISTA_SUCURSAL
AS
BEGIN
    SELECT ID_SUCURSAL, CODIGO, N.ID_NEGOCIO, NOMBRE_SUCURSAL, DIRECCION_SUCURSAL, UBICACION_SUCURSAL.Lat AS LATITUD, UBICACION_SUCURSAL.Long AS LONGITUD, CIUDAD_SUCURSAL, ESTADO FROM SUCURSAL S
    INNER JOIN NEGOCIO N on S.ID_NEGOCIO = N.ID_NEGOCIO;
END;
GO
CREATE PROCEDURE PA_LISTA_SUCURSAL_PAGINACION(
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @TotalCount INT;
    SELECT @TotalCount = COUNT(*) FROM SUCURSAL S INNER JOIN NEGOCIO N on S.ID_NEGOCIO = N.ID_NEGOCIO;

    SELECT ID_SUCURSAL, CODIGO, N.ID_NEGOCIO, NOMBRE_SUCURSAL, DIRECCION_SUCURSAL, UBICACION_SUCURSAL.Lat AS LATITUD, UBICACION_SUCURSAL.Long AS LONGITUD, CIUDAD_SUCURSAL, ESTADO FROM SUCURSAL S
    INNER JOIN NEGOCIO N on S.ID_NEGOCIO = N.ID_NEGOCIO
    ORDER BY ID_SUCURSAL OFFSET (@PageNumber - 1) * @PageSize ROWS
    FETCH NEXT @PageSize ROWS ONLY;

    SELECT @TotalCount AS TotalCount;
END;
GO

CREATE PROCEDURE PA_OBTENER_SUCURSAL(
@Id_Sucursal int
)
AS
BEGIN
    SELECT ID_SUCURSAL, CODIGO, O.ID_NEGOCIO, O.NOMBRE AS NOMBRE_NEGOCIO, O.TELEFONO, O.RUC, O.DIRECCION, O.CORREO_ELECTRONICO, NOMBRE_SUCURSAL, DIRECCION_SUCURSAL, UBICACION_SUCURSAL.Lat AS LATITUD, UBICACION_SUCURSAL.Long AS LONGITUD, CIUDAD_SUCURSAL, ESTADO FROM SUCURSAL S
    INNER JOIN NEGOCIO O on S.ID_NEGOCIO = O.ID_NEGOCIO 
    WHERE ID_SUCURSAL = @Id_Sucursal;
END;
GO

CREATE PROCEDURE PA_REGISTRAR_SUCURSAL(
@Id_Negocio int,
@Codigo varchar(10),
@Nombre varchar(30),
@Direccion varchar(250),
@Ubicacion geography,
@Ciudad varchar(30),
@Estado bit
)
AS
BEGIN
	INSERT INTO SUCURSAL( CODIGO, ID_NEGOCIO, NOMBRE_SUCURSAL, DIRECCION_SUCURSAL, UBICACION_SUCURSAL, CIUDAD_SUCURSAL, ESTADO)
	VALUES (@Codigo, @Id_Negocio, @Nombre, @Direccion, @Ubicacion, @Ciudad, @Estado);

END;
GO

CREATE PROCEDURE PA_EDITAR_SUCURSAL(
@Id_Sucursal int,
@Nombre varchar(30),
@Direccion varchar(250),
@Ubicacion geography,
@Ciudad varchar(30),
@Estado bit
)
AS
BEGIN
    UPDATE SUCURSAL SET NOMBRE_SUCURSAL = @Nombre, DIRECCION_SUCURSAL = @Direccion, UBICACION_SUCURSAL = @Ubicacion, CIUDAD_SUCURSAL = @Ciudad, ESTADO = @Estado WHERE ID_SUCURSAL = @Id_Sucursal;
END;
GO

CREATE PROCEDURE PA_ELIMINAR_SUCURSAL(
    @Id_Sucursal int
)
AS
BEGIN
    DELETE FROM SUCURSAL WHERE ID_SUCURSAL = @Id_Sucursal;
END;
GO

INSERT INTO SUCURSAL (ID_NEGOCIO, CODIGO, NOMBRE_SUCURSAL, DIRECCION_SUCURSAL, UBICACION_SUCURSAL, CIUDAD_SUCURSAL, ESTADO) 
VALUES (1, '7247', 'SUCURSAL_9 DE OCT y LOS RIOS','AV. 9 DE OCTUBRE 803 Y LOS RIOS',geography::Point(-2.187746,-79.894365, 4326),'Guayaquil',1);
GO
INSERT INTO SUCURSAL (ID_NEGOCIO, CODIGO, NOMBRE_SUCURSAL, DIRECCION_SUCURSAL, UBICACION_SUCURSAL, CIUDAD_SUCURSAL, ESTADO) 
VALUES (1, '6584','SUCURSAL_ALBANBORJA','AV.CARLOS JULIO AROSEMENA S/N',geography::Point(-2.169321,-79.917047, 4326),'Guayaquil',0);
GO

--Modulo Rol Tabla-Procedimiento almacenado-Inserción
CREATE TABLE ROL ( ID_ROL int primary key identity,
NOMBRE varchar(30),
FECHA_CREACION datetime default getdate()
);
GO
CREATE PROCEDURE PA_LISTA_ROL
AS
BEGIN
	SELECT ID_ROL, NOMBRE, FECHA_CREACION FROM ROL;
END;
GO

INSERT INTO ROL (NOMBRE)
VALUES ('Administrador'), ('Empleado');

--Modulo Menu Tabla-Procedimiento almacenado-Inserción
CREATE TABLE MENU ( ID_MENU int primary key identity,
NOMBRE_MENU varchar(50),
URL_MENU varchar(50),
NOMBRE_ICONO varchar(50),
FECHA_CREACION datetime default getdate()
);
GO
CREATE PROCEDURE PA_OBTENER_MENU(
@Id_Usuario int
)
AS
BEGIN
	SELECT M.ID_MENU, M.NOMBRE_MENU, M.URL_MENU, M.NOMBRE_ICONO, M.FECHA_CREACION FROM USUARIO U
	INNER JOIN ROL R ON U.ID_ROL = R.ID_ROL
	INNER JOIN PERMISO P ON R.ID_ROL = P.ID_ROL
	INNER JOIN MENU M ON P.ID_MENU = M.ID_MENU
	WHERE U.ID_USUARIO = @Id_Usuario;
END;
GO
INSERT INTO MENU (NOMBRE_MENU, URL_MENU, NOMBRE_ICONO)
VALUES 
('Usuarios', '/usuario', 'person'),
('Compra', '/compra', 'local_grocery_store'),
('Venta', '/venta', 'attach_money'),
('Productos', '/producto', 'shopping_basket'),
('Categorias', '/categoria', 'storage'),
('Clientes', '/cliente', 'group'),
('Proveedores', '/proveedor', 'inventory'),
('Transportista', '/transportista', 'local_shipping'),
('Ofertas', '/oferta', 'more'),
('Sucursales', '/sucursal', 'location_city'),
('Negocio', '/negocio/1', 'store');

--Creación de la tabla intermendia Permiso y sus inserciones
CREATE TABLE PERMISO ( ID_PERMISO int primary key identity,
ID_ROL int references ROL(ID_ROL),
ID_MENU int references MENU(ID_MENU)
);
GO
INSERT INTO PERMISO (ID_ROL, ID_MENU)
VALUES 
(1, 1), -- Administrador - Usuarios
(1, 2), -- Administrador - Compras
(1, 3), -- Administrador - Ventas
(1, 4), -- Administrador - Productos
(1, 5), -- Administrador - Categorías
(1, 6), -- Administrador - Clientes
(1, 7), -- Administrador - Proveedores
(1, 8), -- Administrador - Transportistas
(1, 9), -- Administrador - Ofertas
(1, 10), --Administrador - Sucursales
(1, 11); --Administrador - Negocio

INSERT INTO PERMISO (ID_ROL, ID_MENU)
VALUES 
(2, 2), -- Empleado - Compras
(2, 3), -- Empleado - Ventas
(2, 4), -- Empleado - Productos
(2, 5), -- Empleado - Categorías
(2, 9); -- Empleado - Ofertas
GO

--Modulo Usuario Tabla-Procedimientos almacenados
CREATE TABLE USUARIO (ID_USUARIO int primary key identity,
CODIGO varchar(10),
NOMBRE_COMPLETO varchar(70),
CORREO_ELECTRONICO nvarchar(50),
CLAVE nvarchar(300),
ID_ROL int references ROL(ID_ROL),
ESTADO bit,
FECHA_CREACION datetime default getdate()
);
GO
INSERT INTO USUARIO 
(CODIGO, NOMBRE_COMPLETO, CORREO_ELECTRONICO, CLAVE, ID_ROL, ESTADO) VALUES ('00001', 'Abraham Andres Farfan Sanchez', 'hermanosfarfan@gmail.com', CONVERT(VARCHAR(64), HASHBYTES('SHA2_256', '1234qwer/.'), 2), 1, 1);
GO 

CREATE PROCEDURE PA_LISTA_USUARIO
AS
BEGIN
	SELECT ID_USUARIO, CODIGO, NOMBRE_COMPLETO, CORREO_ELECTRONICO, R.ID_ROL, R.NOMBRE AS NOMBRE_ROL, ESTADO, U.FECHA_CREACION FROM USUARIO U
	inner join ROL R ON U.ID_ROL = R.ID_ROL;
END;
GO
CREATE PROCEDURE PA_LISTA_USUARIO_PAGINACION(
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @TotalCount INT;
    SELECT @TotalCount = COUNT(*) FROM USUARIO U INNER JOIN ROL R ON U.ID_ROL = R.ID_ROL;

	SELECT ID_USUARIO, CODIGO, NOMBRE_COMPLETO, CORREO_ELECTRONICO, R.ID_ROL, R.NOMBRE AS NOMBRE_ROL, ESTADO, U.FECHA_CREACION FROM USUARIO U
	INNER JOIN ROL R ON U.ID_ROL = R.ID_ROL
    ORDER BY ID_USUARIO OFFSET (@PageNumber - 1) * @PageSize ROWS
    FETCH NEXT @PageSize ROWS ONLY;

    SELECT @TotalCount AS TotalCount;
END;

GO
CREATE PROCEDURE PA_OBTENER_USUARIO(
	@Id_Usuario int
)
AS
BEGIN
	SELECT ID_USUARIO, CODIGO, NOMBRE_COMPLETO, CORREO_ELECTRONICO, R.ID_ROL, R.NOMBRE AS NOMBRE_ROL, ESTADO, U.FECHA_CREACION FROM USUARIO U
	inner join ROL R ON U.ID_ROL = R.ID_ROL WHERE ID_USUARIO = @Id_Usuario;
END;
GO

CREATE PROCEDURE PA_INICIAR_SESION(
@Correo_Electronico varchar(50),
@Clave nvarchar(300)
)
AS 
BEGIN
	SELECT ID_USUARIO, CODIGO, NOMBRE_COMPLETO, CLAVE, CORREO_ELECTRONICO, R.ID_ROL, R.NOMBRE AS NOMBRE_ROL, ESTADO, U.FECHA_CREACION FROM USUARIO U
	inner join ROL R ON U.ID_ROL = R.ID_ROL
	WHERE CORREO_ELECTRONICO = @Correo_Electronico and CLAVE = @Clave;
END;
GO

CREATE PROCEDURE PA_REGISTRAR_USUARIO(
@Codigo varchar(10),
@Nombre_Completo varchar(70),
@Correo_Electronico varchar(50),
@Clave nvarchar(300),
@Id_Rol int,
@Estado bit
)
AS
BEGIN
	INSERT INTO USUARIO(CODIGO, NOMBRE_COMPLETO, CLAVE, CORREO_ELECTRONICO, ID_ROL, ESTADO) 
	values(@Codigo, @Nombre_Completo, @Clave, @Correo_Electronico, @Id_Rol, @Estado);
END;
GO

CREATE PROCEDURE PA_EDITAR_USUARIO(
@Id_Usuario INT,
@Nombre_Completo VARCHAR(70),
@Correo_Electronico VARCHAR(50),
@Clave NVARCHAR(300),
@Id_Rol INT,
@Estado BIT
)
AS
BEGIN
    UPDATE USUARIO SET NOMBRE_COMPLETO = @Nombre_Completo, CORREO_ELECTRONICO = @Correo_Electronico, CLAVE = @Clave, ID_ROL = @Id_Rol, ESTADO = @Estado WHERE ID_USUARIO = @Id_Usuario;
END;
GO

CREATE  PROCEDURE PA_ELIMINAR_USUARIO(
@Id_Usuario int
)
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM USUARIO WHERE ID_USUARIO = @Id_Usuario;
END;
GO

--Modulo Proveedor Tabla-Procedimientos almacenados
CREATE TABLE PROVEEDOR (ID_PROVEEDOR int primary key identity,
CODIGO varchar(10),
NOMBRES varchar(30),
APELLIDOS varchar(30),
CEDULA varchar(10),
TELEFONO varchar(10),
CORREO_ELECTRONICO nvarchar(50),
ESTADO bit,
FECHA_REGISTRO datetime default getdate()
);
GO

CREATE PROCEDURE PA_LISTA_PROVEEDOR
AS
BEGIN
	SELECT ID_PROVEEDOR, CODIGO, NOMBRES, APELLIDOS, CEDULA, TELEFONO, CORREO_ELECTRONICO, ESTADO, FECHA_REGISTRO FROM PROVEEDOR;
END;
GO

CREATE PROCEDURE PA_LISTA_PROVEEDOR_PAGINACION(
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @TotalCount INT;
    SELECT @TotalCount = COUNT(*) FROM PROVEEDOR;

	SELECT ID_PROVEEDOR, CODIGO, NOMBRES, APELLIDOS, CEDULA, TELEFONO, CORREO_ELECTRONICO, ESTADO, FECHA_REGISTRO FROM PROVEEDOR
    ORDER BY ID_PROVEEDOR OFFSET (@PageNumber - 1) * @PageSize ROWS
    FETCH NEXT @PageSize ROWS ONLY;

    SELECT @TotalCount AS TotalCount;
END;
GO

CREATE PROCEDURE PA_OBTENER_PROVEEDOR(
	@Id_Proveedor int
)
AS
BEGIN
	SELECT ID_PROVEEDOR, CODIGO, NOMBRES, APELLIDOS, CEDULA, TELEFONO, CORREO_ELECTRONICO, ESTADO, FECHA_REGISTRO FROM PROVEEDOR
	WHERE ID_PROVEEDOR = @Id_Proveedor;
END;
GO

CREATE PROCEDURE PA_REGISTRAR_PROVEEDOR(
@Codigo varchar(10),
@Nombres varchar(30),
@Apellidos varchar(30),
@Cedula varchar(10),
@Telefono varchar(10),
@Correo_Electronico varchar(50),
@Estado bit
)
AS
BEGIN
	INSERT INTO PROVEEDOR(CODIGO, NOMBRES, APELLIDOS, CEDULA, TELEFONO, CORREO_ELECTRONICO, ESTADO) 
	values(@Codigo, @Nombres, @Apellidos, @Cedula, @Telefono, @Correo_Electronico, @Estado);
END;
GO

CREATE PROCEDURE PA_EDITAR_PROVEEDOR(
@Id_Proveedor int,
@Nombres varchar(30),
@Apellidos varchar(30),
@Cedula varchar(10),
@Telefono varchar(10),
@Correo_Electronico varchar(50),
@Estado bit
)
AS
BEGIN
	UPDATE PROVEEDOR set NOMBRES = @Nombres, APELLIDOS = @Apellidos, CEDULA = @Cedula, TELEFONO = @Telefono, CORREO_ELECTRONICO = @Correo_Electronico, ESTADO = @Estado WHERE ID_PROVEEDOR = @Id_Proveedor;
END;
GO

CREATE PROCEDURE PA_ELIMINAR_PROVEEDOR(
@Id_Proveedor int
)
AS
BEGIN
	DELETE FROM PROVEEDOR WHERE ID_PROVEEDOR = @Id_Proveedor;
END;
GO

--Modulo Transportista Tabla-Procedimientos almacenados
CREATE TABLE TRANSPORTISTA(ID_TRANSPORTISTA int primary key identity,
CODIGO varchar(10),
NOMBRES varchar(30),
APELLIDOS varchar(30),
CEDULA varchar(10),
TELEFONO varchar(10),
CORREO_ELECTRONICO nvarchar(50),
IMAGEN varbinary(max)NUll,
ESTADO bit,
FECHA_REGISTRO datetime default getdate()
);
GO

CREATE PROCEDURE PA_LISTA_TRANSPORTISTA
AS
BEGIN
	SELECT ID_TRANSPORTISTA, CODIGO, NOMBRES, APELLIDOS, CEDULA, TELEFONO, CORREO_ELECTRONICO, IMAGEN, ESTADO, FECHA_REGISTRO FROM TRANSPORTISTA;
END;
GO
CREATE PROCEDURE PA_LISTA_TRANSPORTISTA_PAGINACION(
    @PageNumber INT = 1,
    @PageSize INT = 10   
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @TotalCount INT;
    SELECT @TotalCount = COUNT(*) FROM TRANSPORTISTA;

	SELECT ID_TRANSPORTISTA, CODIGO, NOMBRES, APELLIDOS, CEDULA, TELEFONO, CORREO_ELECTRONICO, IMAGEN, ESTADO, FECHA_REGISTRO FROM TRANSPORTISTA
    ORDER BY ID_TRANSPORTISTA OFFSET (@PageNumber - 1) * @PageSize ROWS
    FETCH NEXT @PageSize ROWS ONLY;

    SELECT @TotalCount AS TotalCount;
END;
GO

CREATE PROCEDURE PA_OBTENER_TRANSPORTISTA(
	@Id_Transportista int
)
AS
BEGIN
	SELECT ID_TRANSPORTISTA, CODIGO, NOMBRES, APELLIDOS, CEDULA, TELEFONO, CORREO_ELECTRONICO, IMAGEN ,ESTADO, FECHA_REGISTRO FROM TRANSPORTISTA
	WHERE ID_TRANSPORTISTA = @Id_Transportista;
END;
GO

CREATE PROCEDURE PA_REGISTRAR_TRANSPORTISTA(
@Codigo varchar(10),
@Nombres varchar(30),
@Apellidos varchar(30),
@Cedula varchar(10),
@Telefono varchar(10),
@Correo_Electronico varchar(50),
@Imagen varbinary(max) = NULL,
@Estado bit
)
AS
BEGIN
	INSERT INTO TRANSPORTISTA(CODIGO, NOMBRES, APELLIDOS, CEDULA, TELEFONO, CORREO_ELECTRONICO, IMAGEN, ESTADO) 
	values(@Codigo, @Nombres, @Apellidos, @Cedula, @Telefono, @Correo_Electronico, @Imagen, @Estado);
END;
GO

CREATE PROCEDURE PA_EDITAR_TRANSPORTISTA(
@Id_Transportista int,
@Nombres varchar(30),
@Apellidos varchar(30),
@Cedula varchar(10),
@Telefono varchar(10),
@Correo_Electronico varchar(50),
@Imagen varbinary(max) = NULL,
@Estado bit
)
AS
BEGIN
	UPDATE TRANSPORTISTA set NOMBRES = @Nombres, APELLIDOS = @Apellidos, CEDULA = @Cedula, TELEFONO = @Telefono, CORREO_ELECTRONICO = @Correo_Electronico, IMAGEN = @Imagen, ESTADO = @Estado WHERE ID_TRANSPORTISTA = @Id_Transportista;
END;
GO

CREATE PROCEDURE PA_ELIMINAR_TRANSPORTISTA(
@Id_Transportista int
)
AS
BEGIN
	DELETE FROM TRANSPORTISTA WHERE ID_TRANSPORTISTA = @Id_Transportista;
END;
GO

--Modulo Cliente Tabla-Procedimientos almacenados
CREATE TABLE CLIENTE (ID_CLIENTE int primary key identity,
CODIGO varchar(10),
NOMBRES varchar(30),
APELLIDOS varchar(30),
CEDULA varchar(10),
TELEFONO varchar(10),
CORREO_ELECTRONICO nvarchar(50),
FECHA_REGISTRO datetime default getdate()
);
GO

CREATE PROCEDURE PA_LISTA_CLIENTE
AS
BEGIN
	SELECT ID_CLIENTE, CODIGO, NOMBRES, APELLIDOS, CEDULA, TELEFONO, CORREO_ELECTRONICO, FECHA_REGISTRO FROM CLIENTE;
END;
GO
CREATE PROCEDURE PA_LISTA_CLIENTE_PAGINACION(
    @PageNumber INT = 1,
    @PageSize INT = 10   
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @TotalCount INT;
    SELECT @TotalCount = COUNT(*) FROM PRODUCTO;

	SELECT ID_CLIENTE, CODIGO, NOMBRES, APELLIDOS, CEDULA, TELEFONO, CORREO_ELECTRONICO, FECHA_REGISTRO FROM CLIENTE
    ORDER BY ID_CLIENTE OFFSET (@PageNumber - 1) * @PageSize ROWS
    FETCH NEXT @PageSize ROWS ONLY;

    SELECT @TotalCount AS TotalCount;
END;
GO

CREATE PROCEDURE PA_OBTENER_CLIENTE(
	@Id_Cliente int
)
AS
BEGIN
	SELECT ID_CLIENTE, CODIGO, NOMBRES, APELLIDOS, CEDULA, TELEFONO, CORREO_ELECTRONICO, FECHA_REGISTRO FROM CLIENTE
	WHERE ID_CLIENTE = @Id_Cliente;
END;
GO

CREATE PROCEDURE PA_REGISTRAR_CLIENTE(
@Codigo varchar(10),
@Nombres varchar(30),
@Apellidos varchar(30),
@Cedula varchar(10),
@Telefono varchar(10),
@Correo_Electronico varchar(50)
)
AS
BEGIN
	INSERT INTO CLIENTE(CODIGO, NOMBRES, APELLIDOS, CEDULA, TELEFONO, CORREO_ELECTRONICO) 
	values(@Codigo, @Nombres, @Apellidos, @Cedula, @Telefono, @Correo_Electronico);
END;
GO

CREATE PROCEDURE PA_EDITAR_CLIENTE(
@Id_Cliente int,
@Nombres varchar(30),
@Apellidos varchar(30),
@Cedula varchar(10),
@Telefono varchar(10),
@Correo_Electronico varchar(50)
)
AS
BEGIN
	UPDATE CLIENTE set NOMBRES = @Nombres, APELLIDOS = @Apellidos, CEDULA = @Cedula, TELEFONO = @Telefono, CORREO_ELECTRONICO = @Correo_Electronico WHERE ID_CLIENTE = @Id_Cliente;
END;
GO

CREATE PROCEDURE PA_ELIMINAR_CLIENTE(
@Id_Cliente int
)
AS
BEGIN
	DELETE FROM CLIENTE WHERE ID_CLIENTE = @Id_Cliente;
END;
GO

--Modulo Categoria Tabla-Procedimientos almacenados-Inserción
CREATE TABLE CATEGORIA ( ID_CATEGORIA INT PRIMARY KEY IDENTITY,
CODIGO varchar(10),
NOMBRE_CATEGORIA nvarchar(50),
ESTADO bit,
FECHA_CREACION datetime default getdate()
);
GO
CREATE PROCEDURE PA_LISTA_CATEGORIA
AS
BEGIN

    SELECT ID_CATEGORIA, CODIGO, NOMBRE_CATEGORIA, ESTADO, FECHA_CREACION FROM CATEGORIA;
END;
GO
CREATE PROCEDURE PA_LISTA_CATEGORIA_PAGINACION(
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @TotalCount INT;
    SELECT @TotalCount = COUNT(*) FROM CATEGORIA;

    SELECT ID_CATEGORIA, CODIGO, NOMBRE_CATEGORIA, ESTADO, FECHA_CREACION FROM CATEGORIA
    ORDER BY ID_CATEGORIA OFFSET (@PageNumber - 1) * @PageSize ROWS
    FETCH NEXT @PageSize ROWS ONLY;

    SELECT @TotalCount AS TotalCount;
END;
GO
CREATE PROCEDURE PA_OBTENER_CATEGORIA(
    @Id_Categoria int
)
AS
BEGIN
    SELECT ID_CATEGORIA, CODIGO, NOMBRE_CATEGORIA, ESTADO, FECHA_CREACION FROM CATEGORIA
    WHERE ID_CATEGORIA = @Id_Categoria;
END;
GO
CREATE PROCEDURE PA_REGISTRAR_CATEGORIA(
    @Codigo varchar(10),
    @Nombre nvarchar(50),
    @Estado bit
)
AS
BEGIN
    INSERT INTO CATEGORIA (CODIGO, NOMBRE_CATEGORIA, ESTADO) VALUES (@Codigo, @Nombre, @Estado);
END;
GO
CREATE PROCEDURE PA_EDITAR_CATEGORIA(
    @Id_Categoria int,
    @Nombre nvarchar(50),
    @Estado bit
)
AS
BEGIN
    UPDATE CATEGORIA SET NOMBRE_CATEGORIA = @Nombre, ESTADO = @Estado WHERE ID_CATEGORIA = @Id_Categoria;
END;
GO
CREATE PROCEDURE PA_ELIMINAR_CATEGORIA(
    @Id_Categoria int
)
AS
BEGIN
    DELETE FROM CATEGORIA WHERE ID_CATEGORIA = @Id_Categoria;
END;
GO

INSERT INTO CATEGORIA(CODIGO, NOMBRE_CATEGORIA, ESTADO) VALUES ('6564', 'Frutas y Verduras',1),
('7845', 'Despensa',1),
('1247', 'Preparados',1),
('0786', 'Bebidas y Licores',1),
('3472', 'Refrigerados',1),
('1308', 'Congelados',1),
('6832', 'Carnes',1),
('1375', 'Embutidos',1),
('3529', 'Panaderia',1),
('4839', 'Mascotas',1),
('3098', 'Cuidado Personal',1),
('4802', 'Cuidado del Hogar',1),
('6796', 'Electrodomésticos',1),
('1378', 'Jarnideria y Plantas',1);

--Modulo Producto Tabla-Procedimientos almacenados
CREATE TABLE PRODUCTO( ID_PRODUCTO int primary key identity,
CODIGO varchar(10),
DESCRIPCION nvarchar(50),
NOMBRE_PRODUCTO nvarchar(30),
ID_CATEGORIA int references CATEGORIA (ID_CATEGORIA),
PAIS_ORIGEN varchar(30),
STOCK int not null default 0,
PRECIO_COMPRA decimal (10,2) default 0,
PRECIO_VENTA decimal (10,2) default 0,
ESTADO bit,
);
GO

CREATE PROCEDURE PA_LISTA_PRODUCTO
AS
BEGIN
	SELECT ID_PRODUCTO, P.CODIGO, DESCRIPCION, NOMBRE_PRODUCTO, C.ID_CATEGORIA, C.NOMBRE_CATEGORIA, PAIS_ORIGEN, STOCK, PRECIO_COMPRA, PRECIO_VENTA, P.ESTADO FROM PRODUCTO P
	INNER JOIN CATEGORIA C on P.ID_CATEGORIA = C.ID_CATEGORIA;
END;

GO
CREATE PROCEDURE PA_LISTA_PRODUCTO_PAGINACION(
    @PageNumber INT = 1,
    @PageSize INT = 10   
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @TotalCount INT;
    SELECT @TotalCount = COUNT(*) FROM PRODUCTO P INNER JOIN CATEGORIA C on P.ID_CATEGORIA = C.ID_CATEGORIA;

	  SELECT ID_PRODUCTO, P.CODIGO, DESCRIPCION, NOMBRE_PRODUCTO, C.ID_CATEGORIA, C.NOMBRE_CATEGORIA, PAIS_ORIGEN, STOCK, PRECIO_COMPRA, PRECIO_VENTA, P.ESTADO FROM PRODUCTO P
	  INNER JOIN CATEGORIA C on P.ID_CATEGORIA = C.ID_CATEGORIA
    ORDER BY ID_PRODUCTO OFFSET (@PageNumber - 1) * @PageSize ROWS
    FETCH NEXT @PageSize ROWS ONLY;

    SELECT @TotalCount AS TotalCount;
END;
GO

CREATE PROCEDURE PA_OBTENER_PRODUCTO(
	@Id_Producto int
)
AS
BEGIN
	SELECT ID_PRODUCTO, P.CODIGO, DESCRIPCION, NOMBRE_PRODUCTO, C.ID_CATEGORIA, C.NOMBRE_CATEGORIA, PAIS_ORIGEN, P.ESTADO FROM PRODUCTO P
	inner join CATEGORIA C on P.ID_CATEGORIA = C.ID_CATEGORIA
	WHERE ID_PRODUCTO = @Id_Producto
END;
GO

CREATE PROCEDURE PA_REGISTRAR_PRODUCTO(
@Codigo varchar(10),
@Descripion nvarchar(50),
@Nombre_Producto varchar(30),
@Id_Categoria int,
@Pais_Origen varchar(30),
@Estado bit
)
AS
BEGIN
	INSERT INTO PRODUCTO(CODIGO, DESCRIPCION, NOMBRE_PRODUCTO, ID_CATEGORIA, PAIS_ORIGEN, ESTADO) 
	values(@Codigo, @Descripion, @Nombre_Producto, @Id_Categoria, @Pais_Origen, @Estado);
END;
GO

CREATE PROCEDURE PA_EDITAR_PRODUCTO(
@Id_Producto int,
@Descripion nvarchar(50),
@Nombre_Producto varchar(30),
@Id_Categoria int,
@Pais_Origen varchar(30),
@Estado bit
)
AS
BEGIN
	UPDATE PRODUCTO SET DESCRIPCION = @Descripion, NOMBRE_PRODUCTO = @Nombre_Producto, ID_CATEGORIA = @Id_Categoria, PAIS_ORIGEN = @Pais_Origen, ESTADO  = @Estado WHERE ID_PRODUCTO = @Id_Producto;
END;
GO

CREATE PROCEDURE PA_ELIMINAR_PRODUCTO(
@Id_Producto int
)
AS
BEGIN
	DELETE FROM PRODUCTO WHERE ID_PRODUCTO = @Id_Producto;
END;
GO

--Modulo Oferta Tabla-Procedimientos almacenados
CREATE TABLE OFERTA (ID_OFERTA INT PRIMARY KEY IDENTITY,
CODIGO varchar(10),
NOMBRE_OFERTA varchar(50), 
ID_PRODUCTO int references PRODUCTO(ID_PRODUCTO),
DESCRIPCION varchar(250),
FECHA_INICIO date,
FECHA_FIN date,
DESCUENTO decimal(5,2) default 0,
ESTADO bit,
FECHA_CREACION datetime default getdate()
);
GO
CREATE PROCEDURE PA_LISTA_OFERTA
AS
BEGIN
	SELECT ID_OFERTA, O.CODIGO, NOMBRE_OFERTA, P.ID_PRODUCTO, P.NOMBRE_PRODUCTO, O.DESCRIPCION, FECHA_INICIO, FECHA_FIN, DESCUENTO, O.ESTADO, O.FECHA_CREACION FROM OFERTA O
	inner join PRODUCTO P on O.ID_PRODUCTO = P.ID_PRODUCTO;
END;
GO

CREATE PROCEDURE PA_LISTA_OFERTA_PAGINACION(
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @TotalCount INT;
    SELECT @TotalCount = COUNT(*) FROM OFERTA O INNER JOIN PRODUCTO P on O.ID_PRODUCTO = P.ID_PRODUCTO;

	SELECT ID_OFERTA, O.CODIGO, NOMBRE_OFERTA, P.ID_PRODUCTO, P.NOMBRE_PRODUCTO, O.DESCRIPCION, FECHA_INICIO, FECHA_FIN, DESCUENTO, O.ESTADO, O.FECHA_CREACION FROM OFERTA O
	INNER JOIN PRODUCTO P on O.ID_PRODUCTO = P.ID_PRODUCTO
    ORDER BY ID_OFERTA OFFSET (@PageNumber - 1) * @PageSize ROWS
    FETCH NEXT @PageSize ROWS ONLY;

    SELECT @TotalCount AS TotalCount;    
END;
GO

CREATE PROCEDURE PA_OBTENER_OFERTA(
	@Id_Oferta int
)
AS
BEGIN
	SELECT ID_OFERTA, O.CODIGO, NOMBRE_OFERTA, P.ID_PRODUCTO, P.CODIGO AS CODIGO_PRODUCTO, P.DESCRIPCION AS DESCRIPCION_PRODUCTO, C.ID_CATEGORIA, C.CODIGO AS CODIGO_CATEGORIA, C.NOMBRE_CATEGORIA, C.ESTADO AS ESTADO_CATEGORIA, P.PAIS_ORIGEN, P.STOCK, P.PRECIO_VENTA, P.ESTADO AS ESTADO_PRODUCTO, P.NOMBRE_PRODUCTO, O.DESCRIPCION, FECHA_INICIO, FECHA_FIN, DESCUENTO, O.ESTADO, O.FECHA_CREACION FROM OFERTA O
	inner join PRODUCTO P on O.ID_PRODUCTO = P.ID_PRODUCTO
	inner join CATEGORIA C on P.ID_CATEGORIA = C.ID_CATEGORIA WHERE ID_OFERTA = @Id_Oferta;
END;
GO

CREATE PROCEDURE PA_REGISTRAR_OFERTA(
@Codigo varchar(10),
@Nombre_Oferta varchar(50),
@Id_Producto int,
@Descripcion varchar(250),
@Fecha_Inicio datetime,
@Fecha_Fin datetime,
@Descuento int,
@Estado bit
)
AS
BEGIN
	INSERT INTO OFERTA(CODIGO, NOMBRE_OFERTA, ID_PRODUCTO, DESCRIPCION, FECHA_INICIO, FECHA_FIN, DESCUENTO, ESTADO) 
	values(@Codigo, @Nombre_Oferta, @Id_Producto, @Descripcion, @Fecha_Inicio, @Fecha_Fin, @Descuento, @Estado);
END;
GO

CREATE PROCEDURE PA_EDITAR_OFERTA(
@Id_Oferta int,
@Nombre_Oferta varchar(50),
@Id_Producto int,
@Descripcion varchar(250),
@Fecha_Inicio datetime,
@Fecha_Fin datetime,
@Descuento int,
@Estado bit
)
AS
BEGIN
	UPDATE OFERTA set NOMBRE_OFERTA = @Nombre_Oferta, ID_PRODUCTO = @Id_Producto, DESCRIPCION = @Descripcion, FECHA_INICIO = @Fecha_Inicio, FECHA_FIN = @Fecha_Fin, DESCUENTO = @Descuento, ESTADO = @Estado WHERE ID_OFERTA = @Id_Oferta;
END;
GO

CREATE PROCEDURE PA_ELIMINAR_OFERTA(
@Id_Oferta int
)
AS
BEGIN
	DELETE FROM OFERTA WHERE ID_OFERTA = @Id_Oferta;
END;
GO

--Modulo Compra Tablas-Tabla intermedia-Procedimientos almacenados
CREATE TABLE COMPRA (ID_COMPRA int identity primary key not null, 
ID_USUARIO int references USUARIO(ID_USUARIO),
ID_SUCURSAL int references SUCURSAL (ID_SUCURSAL),
ID_PROVEEDOR int references PROVEEDOR(ID_PROVEEDOR),
ID_TRANSPORTISTA int references TRANSPORTISTA(ID_TRANSPORTISTA),
TIPO_DOCUMENTO varchar(50),
NUMERO_DOCUMENTO varchar(50) unique,
MONTO_TOTAL decimal(10,2),
FECHA_COMPRA datetime default getdate()
);
GO

CREATE TABLE DETALLE_COMPRA ( ID_DETALLE_COMPRA int primary key identity,
ID_COMPRA int references COMPRA (ID_COMPRA),
ID_PRODUCTO int references PRODUCTO (ID_PRODUCTO),
PRECIO_COMPRA decimal (10,2) default 0,
PRECIO_VENTA decimal (10,2) default 0,
CANTIDAD int,
SUBTOTAL decimal (10,2),
FECHA_REGISTRO datetime default getdate()
);
GO

CREATE TYPE [dbo].[TI_Detalle_Compra] AS TABLE(
[Id_Producto] int null,
[Precio_Compra] decimal(10,2) null,
[Precio_Venta] decimal (10,2) null,
[Cantidad] int null,
[SubTotal] decimal (10,2) null
)
GO

CREATE PROCEDURE PA_OBTENER_COMPRA(
    @Numero_Documento varchar(50)
)AS
BEGIN
    SELECT C.ID_COMPRA, U.ID_USUARIO, U.CODIGO AS CODIGO_USUARIO, U.NOMBRE_COMPLETO, S.CODIGO, S.NOMBRE_SUCURSAL, C.TIPO_DOCUMENTO, C.NUMERO_DOCUMENTO, P.ID_PROVEEDOR, P.CODIGO AS CODIGO_PROVEEDOR, P.NOMBRES AS NOMBRES_PROVEEDOR, P.APELLIDOS AS APELLIDOS_PROVEEDOR, P.CEDULA AS CEDULA_PROVEEDOR, T.ID_TRANSPORTISTA, T.CODIGO AS CODIGO_TRANSPORTISTA, T.NOMBRES AS NOMBRES_TRANSPORTISTA, T.APELLIDOS AS APELLIDOS_TRANSPORTISTA, T.CEDULA AS CEDULA_TRANSPORTISTA, C.MONTO_TOTAL, convert(char(10), C.FECHA_COMPRA,103)[FECHA_COMPRA] FROM COMPRA C
    inner join USUARIO U on C.ID_USUARIO = U.ID_USUARIO
    inner join SUCURSAL S on C.ID_SUCURSAL = S.ID_SUCURSAL
    inner join PROVEEDOR P on C.ID_PROVEEDOR = P.ID_PROVEEDOR
    inner join TRANSPORTISTA T on C.ID_TRANSPORTISTA = T.ID_TRANSPORTISTA
    WHERE C.NUMERO_DOCUMENTO = @Numero_Documento;
END;
GO

CREATE PROCEDURE PA_OBTENER_DETALLES_COMPRA(
@Id_Compra int

)AS
BEGIN
    select p.ID_PRODUCTO, p.NOMBRE_PRODUCTO AS PRODUCTOS, dc.PRECIO_COMPRA, dc.PRECIO_VENTA, dc.CANTIDAD, dc.SUBTOTAL from DETALLE_COMPRA dc
    inner join PRODUCTO p on p.ID_PRODUCTO = dc.ID_PRODUCTO
    where dc.ID_COMPRA = @Id_Compra;
END;
GO

CREATE PROCEDURE PA_REGISTRAR_COMPRA(
    @ID_USUARIO INT,
    @ID_SUCURSAL INT,
    @ID_PROVEEDOR INT,
    @ID_TRANSPORTISTA INT,
    @TIPO_DOCUMENTO VARCHAR(50),
    @NUMERO_DOCUMENTO VARCHAR(50),
    @MONTO_TOTAL DECIMAL(10,2),
    @DETALLE_COMPRA [TI_Detalle_Compra] READONLY,
    @RESULTADO BIT OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;
    SET @RESULTADO = 0;

    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Calcular el monto total de la compra desde la tabla de detalles
        SELECT @MONTO_TOTAL = SUM(SubTotal) FROM @DETALLE_COMPRA;

        -- 2. Insertar en la tabla COMPRA
        INSERT INTO COMPRA ( ID_USUARIO, ID_SUCURSAL, ID_PROVEEDOR, ID_TRANSPORTISTA, TIPO_DOCUMENTO, NUMERO_DOCUMENTO, MONTO_TOTAL)
        VALUES (@ID_USUARIO, @ID_SUCURSAL, @ID_PROVEEDOR, @ID_TRANSPORTISTA, @TIPO_DOCUMENTO, @NUMERO_DOCUMENTO, @MONTO_TOTAL);

        -- 3. Obtener el ID de la compra recién insertada
        DECLARE @ID_COMPRA INT = SCOPE_IDENTITY();

        -- 4. Insertar en DETALLE_COMPRA y actualizar STOCK del producto
        INSERT INTO DETALLE_COMPRA (ID_COMPRA, ID_PRODUCTO, PRECIO_COMPRA, PRECIO_VENTA, CANTIDAD, SUBTOTAL)
        SELECT @ID_COMPRA, Id_Producto, Precio_Compra, Precio_Venta, Cantidad, SubTotal FROM @DETALLE_COMPRA;

        -- 5. Actualizar el STOCK y precios del producto
        UPDATE P
        SET 
            P.STOCK = P.STOCK + D.CANTIDAD,
            P.PRECIO_COMPRA = D.PRECIO_COMPRA,
            P.PRECIO_VENTA = D.PRECIO_VENTA
        FROM PRODUCTO P
        INNER JOIN @DETALLE_COMPRA D ON P.ID_PRODUCTO = D.ID_PRODUCTO;

        COMMIT TRANSACTION;

        SET @RESULTADO = 1;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @RESULTADO = 0;
    END CATCH
END;
GO

--Modulo Venta Tablas-Tabla intermedia-Procedimientos almacenados
CREATE TABLE VENTA ( ID_VENTA int primary key identity,
ID_USUARIO int references USUARIO (ID_USUARIO),
ID_SUCURSAL int references SUCURSAL (ID_SUCURSAL),
ID_CLIENTE int references CLIENTE (ID_CLIENTE),
TIPO_DOCUMENTO varchar(50),
NUMERO_DOCUMENTO varchar(50) unique,
MONTO_PAGO decimal (10,2),
MONTO_CAMBIO decimal (10,2),
MONTO_TOTAL decimal (10,2),
DESCUENTO decimal (10,2),
FECHA_VENTA datetime default getdate()
);
GO

CREATE TABLE DETALLE_VENTA ( ID_DETALLE_VENTA int primary key identity,
ID_VENTA int references VENTA (ID_VENTA),
ID_PRODUCTO int references PRODUCTO (ID_PRODUCTO),
PRECIO_VENTA decimal (10,2),
CANTIDAD int,
SUBTOTAL decimal (10,2),
DESCUENTO decimal (10,2),
FECHA_REGISTRO datetime default getdate()
);

CREATE TYPE [dbo].[TI_Detalle_Venta] AS TABLE (
    [Id_Producto] INT NULL,
    [Precio_Venta] DECIMAL(10,2) NULL,
    [Cantidad] INT NULL,
    [SubTotal] DECIMAL(10,2) NULL,
    [Descuento] DECIMAL(10,2) NULL
);
GO

CREATE PROCEDURE PA_OBTENER_VENTA(
    @Numero_Documento varchar(50)
)AS
BEGIN
    SELECT V.ID_VENTA, U.ID_USUARIO, U.CODIGO AS CODIGO_USUARIO, U.NOMBRE_COMPLETO, S.CODIGO, S.NOMBRE_SUCURSAL, V.TIPO_DOCUMENTO, V.NUMERO_DOCUMENTO, C.ID_CLIENTE, C.CODIGO AS CODIGO_CLIENTE, C.NOMBRES AS NOMBRES_CLIENTE, C.APELLIDOS AS APELLIDOS_CLIENTE, C.CEDULA AS CEDULA_CLIENTE, V.MONTO_PAGO, V.MONTO_CAMBIO, V.MONTO_TOTAL, V.DESCUENTO, Convert(char(10),V.FECHA_VENTA,103)[FECHA_VENTA] from VENTA V
    inner join USUARIO U on V.ID_USUARIO = U.ID_USUARIO
    inner join CLIENTE C on V.ID_CLIENTE = C.ID_CLIENTE
    inner join SUCURSAL S on V.ID_SUCURSAL = S.ID_SUCURSAL
    WHERE V.NUMERO_DOCUMENTO = @Numero_Documento;
END;
GO

CREATE PROCEDURE PA_OBTENER_DETALLES_VENTA(
@Id_Venta int

)AS
BEGIN
    SELECT p.ID_PRODUCTO, p.NOMBRE_PRODUCTO AS PRODUCTOS, dv.PRECIO_VENTA, dv.CANTIDAD, dv.SUBTOTAL, dv.DESCUENTO FROM DETALLE_VENTA dv
    inner join PRODUCTO p on p.ID_PRODUCTO = dv.ID_PRODUCTO
    WHERE dv.ID_VENTA = @Id_Venta;
END;
GO

CREATE PROCEDURE PA_REGISTRAR_VENTA(
    @ID_USUARIO INT,
    @ID_SUCURSAL INT,
    @ID_CLIENTE INT,
    @TIPO_DOCUMENTO VARCHAR(50),
    @NUMERO_DOCUMENTO VARCHAR(50),
    @MONTO_PAGO DECIMAL(10,2),
    @MONTO_CAMBIO DECIMAL(10,2),
    @MONTO_TOTAL DECIMAL(10,2),
    @DESCUENTO DECIMAL(10,2),
    @DETALLE_VENTA dbo.TI_Detalle_Venta READONLY,
    @RESULTADO BIT OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;
    SET @RESULTADO = 0;

    BEGIN TRY
        BEGIN TRANSACTION;

        -- Insertar cabecera
        INSERT INTO VENTA (ID_USUARIO,  ID_SUCURSAL, ID_CLIENTE, TIPO_DOCUMENTO, NUMERO_DOCUMENTO, MONTO_PAGO, MONTO_CAMBIO, MONTO_TOTAL, DESCUENTO)
        VALUES (@ID_USUARIO, @ID_SUCURSAL, @ID_CLIENTE, @TIPO_DOCUMENTO, @NUMERO_DOCUMENTO, @MONTO_PAGO, @MONTO_CAMBIO, @MONTO_TOTAL, @DESCUENTO);

        DECLARE @ID_VENTA INT = SCOPE_IDENTITY();

        -- Validar stock disponible
        IF EXISTS (SELECT 1 FROM PRODUCTO P INNER JOIN @DETALLE_VENTA D ON P.ID_PRODUCTO = D.Id_Producto WHERE P.STOCK < D.Cantidad)
        BEGIN
            RAISERROR('Stock insuficiente para uno o más productos.', 16, 1);
            ROLLBACK TRANSACTION;
            RETURN;
        END

        -- Insertar detalles
        INSERT INTO DETALLE_VENTA (ID_VENTA, ID_PRODUCTO, PRECIO_VENTA, CANTIDAD, SUBTOTAL, DESCUENTO)
		SELECT @ID_VENTA, Id_Producto, Precio_Venta, Cantidad, SubTotal, Descuento FROM @DETALLE_VENTA;

        -- Actualizar stock
        UPDATE P
        SET P.STOCK = P.STOCK - D.Cantidad
        FROM PRODUCTO P
        INNER JOIN @DETALLE_VENTA D ON P.ID_PRODUCTO = D.Id_Producto;

        COMMIT TRANSACTION;

        SET @RESULTADO = 1;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @RESULTADO = 0;
    END CATCH
END;
GO

--Procedimientos almacenados de reportes

CREATE PROCEDURE PA_PRODUCTOS_MAS_COMPRADOS
AS 
BEGIN
    SELECT TOP 5 P.NOMBRE_PRODUCTO, COUNT(DC.ID_PRODUCTO) AS CANTIDAD_COMPRADA FROM DETALLE_COMPRA DC
    INNER JOIN PRODUCTO P ON DC.ID_PRODUCTO = P.ID_PRODUCTO GROUP BY P.NOMBRE_PRODUCTO ORDER BY CANTIDAD_COMPRADA DESC;
END;
GO

CREATE PROCEDURE PA_TOP_PROVEEDORES
AS 
BEGIN
    SELECT TOP 5 P.NOMBRES + ' ' + P.APELLIDOS AS NOMBRE_COMPLETO, COUNT(C.ID_PROVEEDOR) AS COMPRAS_TOTALES FROM COMPRA C
    INNER JOIN PROVEEDOR P ON C.ID_PROVEEDOR = P.ID_PROVEEDOR GROUP BY P.NOMBRES, P.APELLIDOS ORDER BY COMPRAS_TOTALES DESC;
END;
GO

CREATE PROCEDURE PA_VIAJES_TRANSPORTISTA
AS 
BEGIN
    SELECT TOP 5 T.NOMBRES + ' ' + T.APELLIDOS AS NOMBRE_COMPLETO, COUNT(C.ID_TRANSPORTISTA) AS VIAJES_REALIZADOS FROM COMPRA C
    INNER JOIN TRANSPORTISTA T ON C.ID_TRANSPORTISTA = T.ID_TRANSPORTISTA GROUP BY T.NOMBRES, T.APELLIDOS ORDER BY COUNT(C.ID_TRANSPORTISTA) DESC;
END;
GO

CREATE PROCEDURE PA_PRODUCTOS_MAS_VENDIDOS
AS 
BEGIN
    SELECT TOP 5 P.NOMBRE_PRODUCTO, COUNT(DV.ID_PRODUCTO) AS CANTIDAD_VENDIDA FROM DETALLE_VENTA DV
    INNER JOIN PRODUCTO P ON DV.ID_PRODUCTO = P.ID_PRODUCTO GROUP BY P.NOMBRE_PRODUCTO ORDER BY CANTIDAD_VENDIDA DESC;
END;
GO

CREATE PROCEDURE PA_TOP_CLIENTES
AS 
BEGIN
    SELECT TOP 5 CL.NOMBRES + ' ' + CL.APELLIDOS AS NOMBRE_COMPLETO, COUNT(V.ID_CLIENTE) AS COMPRAS_TOTALES FROM VENTA V
    INNER JOIN CLIENTE CL ON V.ID_CLIENTE = CL.ID_CLIENTE GROUP BY CL.NOMBRES, CL.APELLIDOS ORDER BY COMPRAS_TOTALES DESC;
END;
GO

CREATE PROCEDURE PA_VENTAS_EMPLEADO
AS 
BEGIN
    SELECT TOP 5 U.NOMBRE_COMPLETO, COUNT(V.ID_USUARIO) AS VENTAS_EMPLEADO FROM VENTA V
    INNER JOIN USUARIO U ON V.ID_USUARIO = U.ID_USUARIO GROUP BY U.NOMBRE_COMPLETO;
END;

GO
